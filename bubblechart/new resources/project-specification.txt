Project Specification for Bubble Chart of Finance Data in D3.js

The chart consists of a bubble chart/scatter plot for multiple data series
which share a common X axis (time) with differing Y axes scaled independently,
such that the plots overlay one another nicely.  The primary points are the
price of the underlying over time (in dollars).  The secondary points are
trade volumes for put and call options at strike prices which fall in the
price range of the underlying price points.  The put and call volume points
will be scaled based on the value of the volume and placed at a vertical
offset such that they rest on a line placed at their strike price on the price
curve Y axis.  The goal is to make it easy for anyone viewing the chart to
visualize the price volatility and market activity on the underlying.

Specific requirements for the chart:
* The chart will have a set of points which represent the price of the
  underlying.  These points will be centered at the time and price for the
  point and sized based on the trading volume of the underlying at that point.
* The chart will have an additional set of points for each strike price within
  the range of the underlying price data for both call and put options.  The
  points will be sized based on the trading volume for the point and the
  option volume scale (given as input).  These points will be positioned in
  one of two ways depending on whether the option price is being used (a
  boolean configuration option given as input).
* When the option price is not used the Y offset of the points is determined
  by their volume.  There are 2 Y axes at each strike price for the options at
  that price, one for the call options and one for the put options.  Both axes
  have their origin (0 value) aligned with the strike price.  The Y axis for
  the put options would have a negative scale (such that larger volume values
  are lower on the graph).  The scale of each Y axis would match the option
  volume scale for the dots such that the dot always rests on the horizontal
  line at the strike price.
* When the option price is used the option point determines its vertical (Y
  axis) position.  There is a single Y axes at each strike price for the
  options at that price which is shared by both put and call options (this may
  be implemented as two identical Y axes if it's easier to mimic the mode not
  using option price).  The axis has its origin (0 value) aligned with the
  strike price and uses the same scale as the Y axis for the underlying  (so in
  effect the points are positioned at their strike price + option price).
* The underlying price points should have the CSS class
  "underlying-price-point" while each of the put and call volume curves have
  the CSS class "put-{strike}-volume-point" and "call-{strike}-volume-point"
  respectively where "{strike}" is replaced by the strike price of the points.
  This is to facilitate defining the thickness and color of the points
  in CSS (feel free to define colors initially as you like).
* The chart should use the Helvetica Neue font for all labels and text on
  the chart.  Ideally the layout should provide sufficient space to
  accommodate possible font changes in the future, but must work well with
  Helvetica Neue.
* An X axis placed at the mean price of the underlying (which will be in
  the chart rather than at the bottom - provided as input).  It will include
  tick marks and labels formatted with the time of day at reasonable intervals
  based on available space.
* The X axis should be labeled with the mean price of the underlying (the
  position at which it is placed vertically) to the right of the chart with
  the word "Mean" below.
* A horizontal line should be added for each strike price which falls within
  the range of the underlying price.  Each line should be labeled with the
  strike price to the left of the chart area.
* Put and call points should be generated for the strike prices
  which fall within the range of the underlying price.  (For example:
  If the underlying price ranges from 19.82 to 20.04, the put and call
  price curves for strike price 20 would be generated, but not 19 or 21.)
  These points should be sized based on the volume and should rest on the
  strike price line with call option volume above the line and put option
  volume below the line.
* The chart should have a label in the top-middle with the current price of
  the underlying, an arrow pointing up when the daily price change is positive
  and down when the daily price change is negative, and the daily price
  change (all privded as input).
* The chart should have a label in the top-right with the current time
  (privded as input).
* The chart should have have a table of 4 variables at the bottom:
  Δt (delta t), σ (sigma), IVc (IV with an overbar subscript c), IVp (IV with
  an overbar subscript p).  Each variable will be part of an equality with the
  value from the input:  timeStep, sigma, callVolatilityModel.meanIV,
  putVolatilityModel.meanIV.  The table should be arranged with delta t and
  sigma on the left, IVc and IVp on the right.
* The chart (and JavaScript code) should support all browsers supported by the
  D3.js library (Firefox, Chrome, Safari, Opera, IE 9 and later) in both
  desktop and mobile versions.  However, developers may skip testing on IE if
  this is inconvenient (e.g. on an OS X development machine).

Specific requirements for the code:
* The JavaScript code must pass validation with JSHint in the default
  configuration, with the browser and jQuery globals defined.
* The JavaScript code may assume that jQuery ($) is already defined as a global
  variable with the most recent version of jQuery and the code is free to use
  jQuery.
* The JavaScript code must work with the ES5 "use strict" pragma in effect
  (for convenience, this may be defined at the top of the script file in
  file scope).
* The JavaScript code should follow good coding practices:  Minimize or
  eliminate mutable global variables, use descriptive variable names,
  use a consistent style, make use of efficient algorithms, and optimizes for
  readability and maintainability by future developers.
* The JavaScript code should make use of active third party projects where
  appropriate to minimize the amount of code that will need to be maintained on
  an ongoing basis.
* The JavaSCript code should have minimal (if any) monkey-patching or
  modification of any 3rd party libraries.  Although these sorts of invasive 
  procedures can be required to get desired functionality without rewriting
  large amounts of code, they increase the maintenance burden and fragility
  significantly, particularly when upgrading the 3rd party libraries.

Preferred style (not mandatory but will ease integration with existing code):
* JavaScript indented with 2 spaces at each level, no tabs.
* JavaScript uses double-quotes for strings rather than single-quotes except
  where inconvenient for HTML in strings.
* CSS class names are spinal-case (all lower-case with dashes between words).

Additional desirable features:
* Wherever possible, visible elements of the chart should have CSS classes
  with meaningful names to facilitate styling of the chart and ease any
  future style changes.
* Wherever possible, the layout and style choices should strive to make the
  chart easily readable and understandable and visually clear to a wide variety
  of people.  In particular, colors used on the chart should be distinct for
  people with red-green colorblindness.

The project deliverables will be a JavaScript function, and any dependencies
of that function, which will take all required data and configuration options
as input (in the format specified in the input-example.json file) and generate
a line chart using D3.js (and, optionally, NVD3.js) along with any CSS rules
to define the visual style of the chart.
